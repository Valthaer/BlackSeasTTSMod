
function move_ship(ship, knots_movement)

    local move = {}
    for _,obj in ipairs(ship) do
        local initial_transform = calculate_transform(obj)
        local moved_knots = move_base(obj, knots_movement, true)
        local new_transform = calculate_transform(obj)
        add_transform_to_move(move, obj.getName(), initial_transform, new_transform)

        print_info(player.steam_name .. ' is moving ' .. obj.getName() .. ' ' .. moved_knots .. ' knots forward')
    end
    --push_to_history_stack(move)

    -- Moving the bases should imply update the gizmos
    --draw_gizmo_future_movements(player.getSelectedObjects())
end


function calculate_future_position(transform, movement_units)
    local displacement_vector = rad_to_vector(transform['rotation'])
    local destination = vec_add(transform['position'], vec_mul_escalar(displacement_vector, movement_units))
    log(destination)
    local corners = compute_corners_coords(transform['size'], transform['rotation'], destination)

    return get_transform(
        destination,
        corners,
        transform['rotation'],
        transform['size']
    )
end

function preview_move_ship(ship)
    local current_transform = calculate_transform(ship)
    local future_transform = calculate_future_position(current_transform, g_knots_movement)

    local strokes = {}
    table.insert(strokes, get_strokes_transform(future_transform))
    Global.setVectorLines(strokes)
end

function clear_preview_ship()
    Global.setVectorLines({})
end

function update_ship_preview()
    local ships = g_state['ship_objs_selected']

    if tlen(ships) ~= 1 then
        clear_preview_ship()
        return
    end

    preview_move_ship(ships[1])
end
