
function move_ship_obj(ship, how_much)
    local current_transform = calculate_transform(ship)
    local future_transform = calculate_future_position(current_transform, how_much)

    apply_transform_obj(ship, current_transform, future_transform)
end

function move_ship()
    local ships = g_state['ship_objs_selected']

    if tlen(ships) ~= 1 then
        print_error('Cannot move more than one ship')
        return
    end

    move_ship_obj(ships[1], g_knots_movement)
    update_ship_preview()
end

function calculate_future_position(transform, movement_units)
    local displacement_vector = rad_to_vector(transform['rotation'])
    local destination = vec_add(transform['position'], vec_mul_escalar(displacement_vector, movement_units))
    local corners = compute_corners_coords(transform['size'], transform['rotation'], destination)

    return get_transform(
        destination,
        corners,
        transform['rotation'],
        transform['size']
    )
end

function preview_move_ship(ship, how_much)
    local current_transform = calculate_transform(ship)
    local future_transform = calculate_future_position(current_transform, how_much)

    local strokes = {}
    table.insert(strokes, get_strokes_transform(future_transform))
    Global.setVectorLines(strokes)
end

function clear_preview_ship()
    Global.setVectorLines({})
end

function update_ship_preview()
    local ships = g_state['ship_objs_selected']

    if tlen(ships) ~= 1 then
        clear_preview_ship()
        return
    end

    preview_move_ship(ships[1], g_knots_movement)
end
