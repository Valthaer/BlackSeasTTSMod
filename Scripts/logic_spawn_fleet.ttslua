
g_ships_index = 1
global_id_counter = 1
g_ships = {}

function add_context_menu_base(base_obj)
    --Nothing to add
end

function add_context_menu_table(table_obj)
    --Nothing to add
end

function on_clone(source_obj, new_obj)
    local name = source_obj.getName()
    print_info(name .. " has been duplicated.")
    local new_name = name .. " clone " .. new_obj.getGUID()
    new_obj.setName(new_name)
    g_ships[new_name] = {
        tile = g_ships[name]['tile'],
        is_red_player = g_ships[name]['is_red_player']
    }
    new_obj.clearContextMenu()
    add_context_menu_base(new_obj)

end

function spawn_fleets()
    --Blue Player
    local obj = spawnObject({
        type = 'Custom_AssetBundle',
        position = { x = -80, y = 13, z = -33},
        rotation = { x = 0, y = 0, z = 0},
        scale = { x = 1, y = 1, z = 1},
        sound = false,
        snap_to_grid = false
     })
     
     obj.setCustomObject({
        assetbundle = ship_data_british_1stRate['url']
    })
    obj.setName(ship_data_british_1stRate['name'] .. ' #' .. global_id_counter)
    print_info('spawn obj' .. obj.getName())
    global_id_counter = global_id_counter + 1
end

--TODO
function spawn_base(base, pos, y_rotation, is_red_player, command_color)
    print_debug('Spawning base #' .. g_base_index)
    local overriden_tex = nil
    if base['ignore_terrain'] == nil then
        local type = from_toggle_number_to_table_type(g_current_table_type)

        if tables[type] == nil then
            type = 'grass'
        end

        if is_red_player then
            overriden_tex = tables[type]['red_player_base_tex']
        else
            overriden_tex = tables[type]['blue_player_base_tex']
        end
    end

    if base['name'] == nil then
        print_error('One of the bases of this army has no name! Please report to us so we can fix it asap')
        return
    end
    local base_obj = spawn_model(base['base'], pos, 0, nil, is_red_player, overriden_tex)

    local base_name = 'base ' .. base['name'] .. ' #' .. g_base_index
    base_obj.setName(base_name)
    add_context_menu_base(base_obj)

    g_base_index = g_base_index + 1
    g_bases[base_name] = {
        tile = base['base'],
        is_red_player = is_red_player
    }

    if command_color ~= 'None' then
        if command_color == 'Orange' then
            base_obj.highlightOn({r=1,g=0.5,b=0}, 86400)
        elseif command_color == 'Yellow' then
            base_obj.highlightOn({r=1,g=1,b=0}, 86400)
        elseif command_color == 'Green' then
            base_obj.highlightOn({r=0.1,g=1,b=0.4}, 86400)
        elseif command_color == 'Purple' then
            base_obj.highlightOn({r=0.3,g=0,b=0.7}, 86400)
        end
    end

    local n = base['n_models']
    if n == 0 then
        base_obj.setRotation({0, y_rotation, 0})
        base_obj.auto_raise = false
        return
    end

    local depth = get_depth_base(base['base'])
    local half_depth = depth / 2
    local half_width = g_base_width_inches / 2

    local rows = 1
    local columns = n
    if n > 4 then
        rows = math.floor(math.sqrt(n))
        columns = math.ceil(n/rows)

    end
    local column_width = g_base_width_inches / (columns + 1)
    local row_depth = depth / (rows + 1)

    local model_name = base['model_data']
    local meshes = {}

    if model_name ~= nil then
        meshes = calculate_random_meshes(n, _G[model_name]['mesh'])
    end

    for i=1,n do
        local column = (i - 1) % columns + 1
        local row = math.floor((i - 1) / columns) + 1

        local random_rotation = math.random(-20, 20)
        local random_rotation = math.random(0, 40) - 20
        if str_has_substr(base_name, 'Camp') then
            random_rotation = 0
        end

        local random_x = 0
        local random_z = 0
        if base['loose'] == true then
            random_x = random_float(-g_max_loose_spawn, g_max_loose_spawn)
            random_z = random_float(-g_max_loose_spawn, g_max_loose_spawn)
        end

        local relative_pos = {
            x = pos['x'] + column * column_width - half_width + random_x,
            y = pos['y'] + g_base_height_inches / 2,
            z = pos['z'] + row * row_depth - half_depth + random_x
        }

        local this_model_name = model_name
        if this_model_name == nil then
            this_model_name = base['fixed_models'][i]
            meshes[i] = random_element(_G[this_model_name]['mesh'])
        end
        local soldier_obj = spawn_model(this_model_name, relative_pos, random_rotation, minimal_collider, is_red_player, nil, meshes[i])
        base_obj.addAttachment(soldier_obj)
    end

    base_obj.setRotation({0, y_rotation, 0})
    base_obj.auto_raise = false
end

function update_player_color_menu(is_player_blue)
    local selected = 1
    if is_player_blue then
        selected = 2
    end
    set_options_dropdown_by_id('dropdown_playercolor', { 'Red', 'Blue' },  selected)
end

function spawn_fleet(nation_selected, first_rates_selected, third_rates_selected, frigates_rates_selected,brigs_rates_selected,is_blue_player,command_color)
    --function spawn_army(army_name, army, is_red_player, command_color)
    math.randomseed(os.time())
    
    local y_rotation = 0
    if not is_blue_player then
        y_rotation = 180
    end


end
