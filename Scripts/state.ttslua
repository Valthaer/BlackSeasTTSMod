g_state = {}

function init_state()
    g_state['ships'] = {}
    g_state['ship_index'] = 0
    g_state['ship_objs_selected'] = {}
end

function how_many_ships_selected()
    return tlen(g_state['ship_objs_selected'])
end

-- Recalculates g_state['ship_objs_selected'], returns true if there's a change
function calculate_ship_objs_selected()
    local ships = {}
    local players = Player.getPlayers()
    for _, player in ipairs(players) do
        local selected_objs = player.getSelectedObjects()
        if selected_objs ~= nil then
            array_concat(ships, filter_ships(selected_objs))
        end
    end

    local are_the_same = array_equals(ships, g_state['ship_objs_selected'],
        function(obj1, obj2)
            return obj1.guid == obj2.guid
        end)

    if are_the_same then
        return false
    end
    g_state['ship_objs_selected'] = ships
    return true
end

-- Given a list of objects in a table, returns another table with ONLY
-- those who start with 'Ship', ignoring the keys
function filter_ships(list)
    local filtered = {}
    for _,obj in ipairs(list) do
        local name = obj.getName()
        if g_ships[name] ~= nil or str_starts_with(obj.getName(), 'Ship') then
            table.insert(filtered, obj)
        end
    end
    return filtered
end


function get_size(obj)
    return obj.getBoundsNormalized()['size']
end

function compute_corners_coords(sizeXZ, rotationY, pos)
    local xhalf = sizeXZ['x'] / 2
    local zhalf = sizeXZ['z'] / 2

    return {
        bow       = rotate_point_relative({x =     0, y = 0, z = zhalf}, pos, rotationY),
        starboard = rotate_point_relative({x = xhalf, y = 0, z =     0}, pos, rotationY),
        topright  = rotate_point_relative({x = xhalf, y = 0, z = zhalf}, pos, rotationY),
        botright  = rotate_point_relative({x = xhalf, y = 0, z =-zhalf}, pos, rotationY),
        port      = rotate_point_relative({x =-xhalf, y = 0, z =     0}, pos, rotationY),
        topleft   = rotate_point_relative({x =-xhalf, y = 0, z = zhalf}, pos, rotationY),
        botleft   = rotate_point_relative({x =-xhalf, y = 0, z =-zhalf}, pos, rotationY),
        stern     = rotate_point_relative({x =     0, y = 0, z =-zhalf}, pos, rotationY)
    }
end

function calculate_transform(obj)
    local _rotation = normalize_angle(math.rad(obj.getRotation()['y']))
    local _position = obj.getPosition()
    local _size = get_size(obj)
    return {
        position = _position,
        corners = compute_corners_coords(_size, _rotation, _position),
        rotation = _rotation,
        size = _size
    }
end

function get_transform(position, corners, rotation, size)
    return {
        position = position,
        corners = corners,
        rotation = rotation,
        size = size
    }
end

function get_strokes_transform(transform)
    local stroke_points = {}
    table.insert(stroke_points, transform['corners']['topright'])
    table.insert(stroke_points, transform['corners']['topleft'])
    table.insert(stroke_points, transform['corners']['botleft'])
    table.insert(stroke_points, transform['corners']['botright'])
    table.insert(stroke_points, transform['corners']['topright'])

    local color = { 0.9, 0.1, 0.1 }

    return
    {
        points    = stroke_points,
        color     = color,
        thickness = g_line_thickness,
        rotation  = {0,0,0}
    }
end

function apply_transform_obj(obj, old_transform, new_transform)
    obj.setPosition(new_transform['position'])
    obj.setRotation(transform_to_rotation_vector(new_transform))
end

function transform_to_rotation_vector(transform)
    -- The normalization of a normalized is the original
    return {
        x = 0,
        y = math.deg(normalize_angle(transform['rotation'])),
        z = 0
    }
end
