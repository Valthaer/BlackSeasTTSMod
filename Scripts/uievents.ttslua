-- UI state globals
g_knots_movement = 3
g_first_rates_selected = '0'
g_third_rates_selected = '0'
g_frigates_rates_selected = '0'
g_brigs_rates_selected = '0'
g_nation_selected = 'Britain'
g_player_color_selected = 'Blue'
g_command_color_selected = 'Blue'

g_current_turn_orientation = 'left'
g_player_turning = false
g_turn_degrees = 15

-- Updates the global that manages the number of paces moved by the other functions, and updates the UI
function slider_knots_changed(player, value, id)
    g_knots_movement = value

    -- It's undocumented, but changing the value of the button does not update
    -- the button_move_forward
    -- Instead we have to change the undocumented text attribute, but we still
    -- change the value because it's the proper thing
    UI.setAttribute('button_move_forward', 'text', 'Move ' .. g_knots_movement .. ' knots')
    UI.setValue('button_move_forward', 'Move ' .. g_knots_movement .. ' knots')
    
    -- Make it consistent for all players
    Wait.frames(function()
        UI.setAttribute('slider_knots', 'value', value)
    end, 1)

    -- Update any gizmo
    update_ship_preview()
end

function on_undo_move(player, value, id)
    --go_back_history_stack()
end

function on_redo_move(player, value, id)
    --go_forward_history_stack()
end

function on_move_forward(player, value, id)
    if how_many_ships_selected() ~= 1 then
        print_error(player.steam_name .. ' is trying to move a ship, but (s)he has no object selected, or more than one, ignoring')
        return
    end

    move_ship()
end

function on_turn_ship(player, value, id)
    if how_many_ships_selected() ~= 1 then
        print_error(player.steam_name .. ' is trying to turn a ship, but (s)he has no object selected, or more than one, ignoring')
        return
    end

    g_player_turning = true
    on_rotation_turn_ui(15)
    on_change_orientation_turn_ui('left')

    UI.setAttribute('panel_turn_bg', 'active', true)
    UI.setAttribute('panel_turn', 'active', true)
    UI.setAttribute('button_move_forward', 'interactable', false)
    UI.setAttribute('button_turn', 'interactable', false)
end

function preview_turn()
    if g_current_turn_orientation == 'left' then
        UI.setValue('text_turn',
            string.format('Turning the ship %2.1f degrees to port', g_turn_degrees))
    else
        UI.setValue('text_turn',
            string.format('Turning the ship %2.1f degrees to starboard', g_turn_degrees))
    end
    update_preview_turn()
end

function on_rotation_turn(player, value, id)
    on_rotation_turn_ui(value)
    preview_turn()
end

function on_rotation_turn_ui(value)
    g_turn_degrees = value
    Wait.frames(function()
        UI.setAttribute('slider_turn_rotation', 'value', value)
    end, 1)
end

function from_toggle_number_to_orientation(value)
    -- Must follow the order of the toggles on main.xml
    if value == 0 then
        return 'left'
    elseif value == 1 then
        return 'right'
    else
        return 'Error'
    end
end

function on_change_orientation_turn(player, value, id, ignore_preview)
    on_change_orientation_turn_ui(from_toggle_number_to_orientation(tonumber(value)))
    preview_turn()
end

function on_change_orientation_turn_ui(value)
    g_current_turn_orientation = value
    if value == 'left' then
        Wait.frames(function()
            UI.setAttribute('toggle_turn_left', 'isOn', true)
        end, 1)
    else
        Wait.frames(function()
            UI.setAttribute('toggle_turn_right', 'isOn', true)
        end, 1)
    end
end

function on_make_turn(player, value, id)
    perform_turn()
    remove_turn_screen()
end

function on_cancel_turn(player, value, id)
    remove_turn_screen()
end

function remove_turn_screen()
    g_player_turning = false

    UI.setAttribute('panel_turn_bg', 'active', false)
    UI.setAttribute('panel_turn', 'active', false)
    UI.setAttribute('button_move_forward', 'interactable', true)
    UI.setAttribute('button_turn', 'interactable', true)

    Global.setVectorLines({})
end


function deploy_fleet(player, value, id)
    local status = UI.getAttribute('panel_bs_fleet_selection', 'active')
    if status == 'True' then
        -- Ignore, the user is clicking despite the menu already being there
        return
    end

    --local book, army = get_initial_army()
    --print_debug('Selected fleet is ' .. g_fleet_selected)    

    --update_book_menu(1)
    on_next_frame(function()        
        UI.setAttribute('panel_bs_fleet_selection_bg', 'active', true)
        UI.setAttribute('panel_bs_fleet_selection_bg', 'visibility', player.color)
        UI.setAttribute('panel_bs_fleet_selection', 'active', true)
        UI.setAttribute('panel_bs_fleet_selection', 'visibility', player.color)
        UI.setAttribute('button_deploy_fleet', 'interactable', false)        
    end)
end

function on_yellow_turn_left(player, value, id)
    print_debug('Yellow turn left')
end

function on_yellow_turn_right(player, value, id)
end

function on_red_turn_left(player, value, id)
end

function on_red_turn_right(player, value, id)
end

function on_nation_selected(player, value, id)
    g_nation_selected = value
end

function on_first_rate_selected(player, value, id)
    g_first_rates_selected = value
end

function on_third_rate_selected(player, value, id)
    g_third_rates_selected = value
end

function on_frigates_selected(player, value, id)
    g_frigates_rates_selected = value
end

function on_brigs_selected(player, value, id)
    g_brigs_rates_selected = value
end

function on_player_color_selected(player, value, id)
    g_player_color_selected = value    
end

function on_command_color_selected(player, value, id)
    g_command_color_selected = value
end

function on_cancel_deploy_fleet(player, value, id)
    UI.setAttribute('panel_bs_fleet_selection_bg', 'active', false)
    UI.setAttribute('panel_bs_fleet_selection_bg', 'visibility', '')
    UI.setAttribute('panel_bs_fleet_selection', 'active', false)
    UI.setAttribute('panel_bs_fleet_selection', 'visibility', '')
    UI.setAttribute('button_deploy_fleet', 'interactable', true)
end

function on_deploy_fleet(player, value, id)       
    UI.setAttribute('panel_bs_fleet_selection_bg', 'active', false)
    UI.setAttribute('panel_bs_fleet_selection_bg', 'visibility', '')
    UI.setAttribute('panel_bs_fleet_selection', 'active', false)
    UI.setAttribute('panel_bs_fleet_selection', 'visibility', '')
    UI.setAttribute('button_deploy_fleet', 'interactable', true)

    print_debug('Spawn fleet')
    print_debug('Nation: ' .. g_nation_selected)
    print_debug('1st rates: ' .. g_first_rates_selected)
    print_debug('3rd rates: ' .. g_third_rates_selected)
    print_debug('Frigates: ' .. g_frigates_rates_selected)
    print_debug('Brigs: ' .. g_brigs_rates_selected)    
    print_debug('Player Color: ' .. g_player_color_selected)  
    print_debug('Command color: ' .. g_command_color_selected)  

    spawn_fleet(g_nation_selected, g_first_rates_selected, g_third_rates_selected, g_frigates_rates_selected,g_brigs_rates_selected,g_player_color_selected,g_command_color_selected)
end
